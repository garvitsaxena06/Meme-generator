{"version":3,"sources":["Header.js","MemeGenerator.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","src","width","alt","MemeGenerator","state","topText","bottomText","randomImg","allMemeImgs","handleChange","bind","handleSubmit","fetch","then","response","json","memes","data","setState","event","target","name","value","this","preventDefault","randNum","Math","floor","random","length","randMemeImg","url","onSubmit","type","placeholder","onChange","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"mSAYeA,MATf,WACI,OACI,4BAAQC,UAAU,UACd,yBAAKC,IAAI,qEAAqEC,MAAM,QAAQC,IAAI,eAChG,+C,0CCsDGC,G,wDAzDX,aAAe,IAAD,8BACV,gBACKC,MAAQ,CACTC,QAAU,GACVC,WAAY,GACZC,UAAY,gCACZC,YAAc,IAElB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBATV,E,gEAYO,IAAD,OAChBE,MAAM,qCACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAC,GAAa,IACRE,EAASF,EAASG,KAAlBD,MACP,EAAKE,SAAS,CACVV,YAAcQ,S,mCAKbG,GAAQ,IAAD,EACMA,EAAMC,OAArBC,EADS,EACTA,KAAMC,EADG,EACHA,MACbC,KAAKL,SAAL,eACKG,EAAQC,M,mCAIJH,GACTA,EAAMK,iBACN,IAAMC,EAAUC,KAAKC,MAAMD,KAAKE,SAAWL,KAAKnB,MAAMI,YAAYqB,QAC5DC,EAAcP,KAAKnB,MAAMI,YAAYiB,GAASM,IACpDR,KAAKL,SAAS,CACVX,UAAYuB,M,+BAKhB,OACI,6BACI,0BAAM/B,UAAU,YAAYiC,SAAUT,KAAKZ,cACvC,2BAAOsB,KAAK,OAAOZ,KAAK,UAAUC,MAAOC,KAAKnB,MAAMC,QAAS6B,YAAY,WAAWC,SAAUZ,KAAKd,eACnG,2BAAOwB,KAAK,OAAOZ,KAAK,aAAaC,MAAOC,KAAKnB,MAAME,WAAY4B,YAAY,cAAcC,SAAUZ,KAAKd,eAC5G,6CACA,yBAAKV,UAAU,QACX,wBAAIA,UAAU,OAAOwB,KAAKnB,MAAMC,SAChC,yBAAKL,IAAKuB,KAAKnB,MAAMG,UAAWN,MAAM,QAAQC,IAAI,aAClD,wBAAIH,UAAU,UAAUwB,KAAKnB,MAAME,mB,GAlD/B8B,IAAMC,YCYnBC,MATf,WACI,OACI,yBAAKvC,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEQwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.faf6480f.chunk.js","sourcesContent":["import React from \"react\"\r\nimport \"./header.css\"\r\n\r\nfunction Header() {\r\n    return (\r\n        <header className=\"header\">\r\n            <img src=\"http://www.pngall.com/wp-content/uploads/2016/05/Trollface-PNG.png\" width=\"200px\" alt=\"troll-face\"/>\r\n            <p>Meme Generator</p>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import React from \"react\"\r\nimport \"./meme.css\"\r\n\r\nclass MemeGenerator extends React.Component {\r\n    constructor() {\r\n        super() \r\n        this.state = {\r\n            topText : \"\",\r\n            bottomText: \"\",\r\n            randomImg : \"http://i.imgflip.com/1bij.jpg\",\r\n            allMemeImgs : []\r\n        }\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.handleSubmit = this.handleSubmit.bind(this)\r\n    }\r\n    \r\n    componentDidMount() {\r\n        fetch(\"https://api.imgflip.com/get_memes\")\r\n        .then(response => response.json())\r\n        .then(response => {\r\n            const {memes} = response.data\r\n            this.setState({\r\n                allMemeImgs : memes\r\n            })\r\n        })\r\n    }\r\n    \r\n    handleChange(event) {\r\n        const {name, value} = event.target\r\n        this.setState({\r\n            [name] : value\r\n        })\r\n    }\r\n    \r\n    handleSubmit(event) {\r\n        event.preventDefault()\r\n        const randNum = Math.floor(Math.random() * this.state.allMemeImgs.length)\r\n        const randMemeImg = this.state.allMemeImgs[randNum].url\r\n        this.setState({\r\n            randomImg : randMemeImg\r\n        })\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <form className=\"meme-form\" onSubmit={this.handleSubmit}>\r\n                    <input type=\"text\" name=\"topText\" value={this.state.topText} placeholder=\"Top Text\" onChange={this.handleChange}/>\r\n                    <input type=\"text\" name=\"bottomText\" value={this.state.bottomText} placeholder=\"Bottom Text\" onChange={this.handleChange}/>\r\n                    <button>GENERATE!</button>\r\n                    <div className=\"meme\">\r\n                        <h2 className=\"top\">{this.state.topText}</h2>\r\n                        <img src={this.state.randomImg} width=\"200px\" alt=\"meme-img\" />\r\n                        <h2 className=\"bottom\">{this.state.bottomText}</h2>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MemeGenerator","import React from 'react';\nimport './App.css';\n\nimport Header from \"./Header\"\nimport MemeGenerator from \"./MemeGenerator\"\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Header />\n            <MemeGenerator />\n        </div>\n    )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}